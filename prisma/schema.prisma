// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EDITOR
  APPROVER
  VIEWER
}

enum UserType {
  ADMIN    // System admins who can create users
  USER     // Regular users created by admins
}

// model User {
//   id            String    @id @default(cuid())
//   firstName     String
//   lastName      String
//   email         String    @unique
//   password      String    // Hashed password
//   role          UserRole  @default(VIEWER)
//   userType      UserType  @default(USER)
//   isActive      Boolean   @default(true)
  
//   // Audit fields
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   createdBy     String?   // ID of admin who created this user
//   lastLogin     DateTime?
  
//   // Relations
//   createdUsers  User[]    @relation("UserCreatedBy")
//   creator       User?     @relation("UserCreatedBy", fields: [createdBy], references: [id])
//   uploadedDocuments Document[] @relation("DocumentUploadedBy")
  
//   // Future RBAC relations (empty for now)
//   // permissions   UserPermission[]
//   // auditLogs     AuditLog[]
// }

enum DocumentStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

enum WorkflowStatus {
  UPLOADED           // Document just uploaded
  PROCESSING_V1      // Sent to external API for V1
  V1_READY          // V1 JSON received, ready for editing
  V1_EDITING        // V1 being edited
  V1_COMPLETED      // V1 editing completed
  PROCESSING_V2     // Sent to external API for V2
  V2_READY         // V2 JSON received, ready for editing
  V2_EDITING       // V2 being edited
  V2_COMPLETED     // V2 editing completed
  APPROVED         // Final approval done
  COMPLETED        // Word document generated
}

model Document {
  id            String         @id @default(cuid())
  fileName      String         // Original file name
  fileType      String         // File extension (pdf, docx, png, etc.)
  mimeType      String         // MIME type
  fileSize      Int            // File size in bytes
  fileContent   String         @db.Text // Base64 encoded file content
  customerName  String         // Customer name associated with the document
  uploadedDate  DateTime       // Date when document was uploaded (can be different from createdAt)
  status        DocumentStatus @default(ACTIVE)
  
  // Workflow fields
  workflowStatus WorkflowStatus @default(UPLOADED)
  
  // Metadata
  description   String?        // Optional description
  tags          String[]       // Optional tags for categorization
  
  // Audit fields
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  uploadedBy    String         // ID of user who uploaded the document
  
  // Relations
  uploader      User           @relation("DocumentUploadedBy", fields: [uploadedBy], references: [id])
  versions      DocumentVersion[]
  
  @@index([customerName])
  @@index([fileType])
  @@index([uploadedDate])
  @@index([uploadedBy])
  @@index([workflowStatus])
}

enum VersionType {
  VERSION_1     // Initial API response
  VERSION_2     // Refined API response
}

enum VersionStatus {
  GENERATED     // Generated by external API
  EDITING       // Being edited by user
  COMPLETED     // Editing completed
  APPROVED      // Approved by approver
}

model DocumentVersion {
  id            String        @id @default(cuid())
  documentId    String        // Reference to parent document
  versionType   VersionType   // V1 or V2
  versionNumber Int           // 1, 2, 3... for tracking edits within same version type
  status        VersionStatus @default(GENERATED)
  
  // JSON content from external API or edited content
  jsonContent   Json          // The actual JSON data
  
  // External API tracking
  externalApiRequestId String? // Track external API requests
  externalApiResponse  Json?   // Store full external API response
  
  // Editing tracking
  editedBy      String?       // User who edited this version
  editedAt      DateTime?     // When it was edited
  
  // Approval tracking
  approvedBy    String?       // User who approved this version
  approvedAt    DateTime?     // When it was approved
  
  // Generated document
  generatedDocumentPath String? // Path to generated Word document
  
  // Audit fields
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     String        // User who created this version
  
  // Relations
  document      Document      @relation(fields: [documentId], references: [id], onDelete: Cascade)
  creator       User          @relation("VersionCreatedBy", fields: [createdBy], references: [id])
  editor        User?         @relation("VersionEditedBy", fields: [editedBy], references: [id])
  approver      User?         @relation("VersionApprovedBy", fields: [approvedBy], references: [id])
  
  @@index([documentId])
  @@index([versionType])
  @@index([status])
  @@index([createdAt])
}

// Add version relations to User model
model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  password      String    // Hashed password
  role          UserRole  @default(VIEWER)
  userType      UserType  @default(USER)
  isActive      Boolean   @default(true)
  
  // Audit fields
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String?   // ID of admin who created this user
  lastLogin     DateTime?
  
  // Relations
  createdUsers  User[]    @relation("UserCreatedBy")
  creator       User?     @relation("UserCreatedBy", fields: [createdBy], references: [id])
  uploadedDocuments Document[] @relation("DocumentUploadedBy")
  
  // Version relations
  createdVersions DocumentVersion[] @relation("VersionCreatedBy")
  editedVersions  DocumentVersion[] @relation("VersionEditedBy")
  approvedVersions DocumentVersion[] @relation("VersionApprovedBy")
}