// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EDITOR
  APPROVER
  VIEWER
}

enum UserType {
  ADMIN    // System admins who can create users
  USER     // Regular users created by admins
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  password      String    // Hashed password
  role          UserRole  @default(VIEWER)
  userType      UserType  @default(USER)
  isActive      Boolean   @default(true)
  
  // Audit fields
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String?   // ID of admin who created this user
  lastLogin     DateTime?
  
  // Relations
  createdUsers  User[]    @relation("UserCreatedBy")
  creator       User?     @relation("UserCreatedBy", fields: [createdBy], references: [id])
  uploadedDocuments Document[] @relation("DocumentUploadedBy")
  
  // Future RBAC relations (empty for now)
  // permissions   UserPermission[]
  // auditLogs     AuditLog[]
}

enum DocumentStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

model Document {
  id            String         @id @default(cuid())
  fileName      String         // Original file name
  fileType      String         // File extension (pdf, docx, png, etc.)
  mimeType      String         // MIME type
  fileSize      Int            // File size in bytes
  fileContent   String         @db.Text // Base64 encoded file content
  customerName  String         // Customer name associated with the document
  uploadedDate  DateTime       // Date when document was uploaded (can be different from createdAt)
  status        DocumentStatus @default(ACTIVE)
  
  // Metadata
  description   String?        // Optional description
  tags          String[]       // Optional tags for categorization
  
  // Audit fields
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  uploadedBy    String         // ID of user who uploaded the document
  
  // Relations
  uploader      User           @relation("DocumentUploadedBy", fields: [uploadedBy], references: [id])
  
  @@index([customerName])
  @@index([fileType])
  @@index([uploadedDate])
  @@index([uploadedBy])
}